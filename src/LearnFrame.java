
import com.sun.glass.events.KeyEvent;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.URL;
import java.sql.*;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dingu
 */
public class LearnFrame extends javax.swing.JFrame {

    /**
     * Creates new form LearnFrame
     */
    
    //  Database credentials
   static final String DB_URL = "jdbc:mysql://localhost:3306/QuestionAnswerDatabase";
   static final String USER = "dingusagar";
   static final String PASS = "dingusagar123";
   Connection conn = null;
   Statement stmt = null;
   ResultSet rs = null;
   boolean chaptersInitialised = false; 
   boolean updateMode = false;
   int numberOfQuestions = 0;
   
   
    
    public LearnFrame() {
        initComponents();
        initDataBase(); 
       
        GetAllChapters();
        countQuestions();
        GetResults();
        jLabel1.requestFocusInWindow();
        setStopMySqlProcess();
        next();
        checkBox.setSelected(true);
        answerText.setVisible(false);
        
        answerText.setLineWrap(true);
        answerText.setWrapStyleWord(true);
        
        questionText.setLineWrap(true);
        questionText.setWrapStyleWord(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        questionText = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        answerText = new javax.swing.JTextArea();
        chapterSelector = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        nextButton = new javax.swing.JLabel();
        previousButton = new javax.swing.JLabel();
        selectedChapterText = new javax.swing.JLabel();
        updateButton = new javax.swing.JLabel();
        deleteButton = new javax.swing.JLabel();
        homeButton = new javax.swing.JLabel();
        questionNoText = new javax.swing.JLabel();
        checkBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 650));
        getContentPane().setLayout(null);

        questionText.setEditable(false);
        questionText.setColumns(20);
        questionText.setFont(new java.awt.Font("URW Palladio L", 1, 18)); // NOI18N
        questionText.setRows(5);
        jScrollPane2.setViewportView(questionText);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(90, 80, 840, 160);

        answerText.setEditable(false);
        answerText.setColumns(20);
        answerText.setFont(new java.awt.Font("URW Palladio L", 1, 18)); // NOI18N
        answerText.setRows(5);
        jScrollPane3.setViewportView(answerText);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(90, 260, 840, 260);

        chapterSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));
        chapterSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chapterSelectorActionPerformed(evt);
            }
        });
        getContentPane().add(chapterSelector);
        chapterSelector.setBounds(140, 570, 160, 27);

        jLabel2.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel2.setText("Select Chapter");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(120, 550, 130, 17);

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/button_next.png"))); // NOI18N
        nextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextButtonMouseClicked(evt);
            }
        });
        getContentPane().add(nextButton);
        nextButton.setBounds(790, 560, 90, 50);

        previousButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/button_previous.png"))); // NOI18N
        previousButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                previousButtonMouseClicked(evt);
            }
        });
        getContentPane().add(previousButton);
        previousButton.setBounds(660, 560, 130, 50);

        selectedChapterText.setFont(new java.awt.Font("URW Palladio L", 1, 36)); // NOI18N
        selectedChapterText.setForeground(new java.awt.Color(186, 216, 11));
        selectedChapterText.setText("Chapter : ");
        getContentPane().add(selectedChapterText);
        selectedChapterText.setBounds(90, 10, 430, 60);

        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/update (1).png"))); // NOI18N
        updateButton.setToolTipText("UPDATE");
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
        });
        getContentPane().add(updateButton);
        updateButton.setBounds(10, 130, 70, 60);

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        deleteButton.setToolTipText("DELETE");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });
        getContentPane().add(deleteButton);
        deleteButton.setBounds(10, 190, 60, 60);

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/home.png"))); // NOI18N
        homeButton.setToolTipText("HOME");
        homeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeButtonMouseClicked(evt);
            }
        });
        getContentPane().add(homeButton);
        homeButton.setBounds(10, 55, 70, 70);

        questionNoText.setFont(new java.awt.Font("URW Palladio L", 1, 36)); // NOI18N
        questionNoText.setForeground(new java.awt.Color(186, 216, 11));
        questionNoText.setText("Question : ");
        getContentPane().add(questionNoText);
        questionNoText.setBounds(580, 20, 320, 50);

        checkBox.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        checkBox.setText("Hide Answer");
        checkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });
        getContentPane().add(checkBox);
        checkBox.setBounds(370, 560, 180, 50);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bg6.jpg"))); // NOI18N
        jLabel1.setMinimumSize(new java.awt.Dimension(1050, 560));
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1010, 710);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseClicked
        // TODO add your handling code here:
        
          if(evt.getButton()== MouseEvent.BUTTON3){
             JOptionPane.showMessageDialog(this, "Next : Show the next Question and Answer \n in the specified Chapter.", "Mr.Help", JOptionPane.INFORMATION_MESSAGE);
             return ;
          }
     next();     
        
    }//GEN-LAST:event_nextButtonMouseClicked

    private void previousButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousButtonMouseClicked
        // TODO add your handling code here:
           if(evt.getButton()== MouseEvent.BUTTON3){
             JOptionPane.showMessageDialog(this, "Previous : Show the previous Question and Answer \n in the specified Chapter.", "Mr.Help", JOptionPane.INFORMATION_MESSAGE);
             return ;
          }
      prev(); 
    }//GEN-LAST:event_previousButtonMouseClicked

    private void chapterSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chapterSelectorActionPerformed
        // TODO add your handling code here:
       if(chaptersInitialised && (updateMode==false))
       {
           System.out.println("ENterd chapter selector !!");
           GetResults();
           next();
                
       }
    }//GEN-LAST:event_chapterSelectorActionPerformed

    private void homeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtonMouseClicked
        // TODO add your handling code here:
          if(evt.getButton()== MouseEvent.BUTTON3){
             JOptionPane.showMessageDialog(this, "Home : Go to home \n\n"                                       
                     + "Click this button to go to main Menu\n", "Mr.Help", JOptionPane.INFORMATION_MESSAGE);
             return ;
        }
        
         new Intro().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_homeButtonMouseClicked

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
        // TODO add your handling code here
        if(evt.getButton()== MouseEvent.BUTTON3){
             JOptionPane.showMessageDialog(this, "Update : Used to update the contents "
                     + "of the present record. \n\n"
                     + "Click on this button to get into UPDATE MODE . \n"
                     + "Now you can edit your question ,answer or change chapter \n"                    
                     + "Click again on this button to save the changes and go back to LEARNING MODE\n", "Mr.Help", JOptionPane.INFORMATION_MESSAGE);
             return ;
        }
        
        
        if(updateMode == true)
        {
            String Uquestion = questionText.getText().trim();
            String Uanswer = answerText.getText().trim();
            String Uchapter = chapterSelector.getSelectedItem().toString();
            
             if(Uanswer.equals("") || Uquestion.equals("")){
             JOptionPane.showMessageDialog(this, "You should give both question and answer");
             return ;
              }
        
      
             if (Uchapter.equals("All")) {
               JOptionPane.showMessageDialog(this, "Select a valid chapter");
               return ;
              }
             
             
             try {
         
               rs.updateString("Question", Uquestion);
               rs.updateString("Answer", Uanswer);
               rs.updateString("Chapter", Uchapter);
               rs.updateRow();
               JOptionPane.showMessageDialog(this, "Successfully Updated");
          
                 } catch (SQLException ex) {
                    Logger.getLogger(LearnFrame.class.getName()).log(Level.SEVERE, null, ex);
                   JOptionPane.showMessageDialog(this, "Some Error !! contact Dingu");
                  }
        
            
            selectedChapterText.setText("Chapter : ");
            questionText.setEditable(false);
            answerText.setEditable(false);
            
            Icon icon = null;
            try {
                icon = new ImageIcon(ImageIO.read( LearnFrame.class.getResourceAsStream( "update (1).png" ) ) );
                updateButton.setIcon(icon);
            } catch (IOException ex) {
                Logger.getLogger(LearnFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            updateMode = false;
        }
        else if(updateMode == false)
        {
            updateMode = true;
            selectedChapterText.setText("UPDATE MODE ON ");
           Icon icon = null;
            try {
                icon = new ImageIcon(ImageIO.read( LearnFrame.class.getResourceAsStream( "update2.png" ) ) );
            } catch (IOException ex) {
                Logger.getLogger(LearnFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

           updateButton.setIcon(icon);
            questionText.setEditable(true);
            answerText.setEditable(true);
            
        }
        

        
    }//GEN-LAST:event_updateButtonMouseClicked

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
       
          if(evt.getButton()== MouseEvent.BUTTON3){
             JOptionPane.showMessageDialog(this, "Delete : Delete a Question Answer \n\n"                                       
                     + "This deletes the current Question Answer Record \n including the Chapter Details\n", "Mr.Help", JOptionPane.INFORMATION_MESSAGE);
             return ;
        }
        
        
        
        try {
       
           int dialogButton = JOptionPane.showConfirmDialog (null, "Are you sure you want to delete current record?","Look before you leap!",JOptionPane.YES_NO_OPTION);
           
           if(dialogButton == JOptionPane.YES_OPTION)
           { rs.deleteRow();
            JOptionPane.showMessageDialog(this, "Successfully Deleted !");
            numberOfQuestions--;
            next();
           }  
           
          } catch (SQLException ex) {
           Logger.getLogger(LearnFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Could not delete ..Contact dingu!");
       }
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void checkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxActionPerformed
        // TODO add your handling code here:
        if(checkBox.isSelected())
            answerText.setVisible(false);
        else
            answerText.setVisible(true);
    }//GEN-LAST:event_checkBoxActionPerformed

    public final void initDataBase()
    {
        try{
       Class.forName("com.mysql.jdbc.Driver");
      conn = DriverManager.getConnection(DB_URL, USER, PASS);
      stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
    }  catch (ClassNotFoundException | SQLException ex) {
           Logger.getLogger(LearnFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Database failed to load!");
       }
    }
    
    public void GetResults()
    {
        String chapter = chapterSelector.getSelectedItem().toString();
        String query = null;
       
        if(chapter.equals("All"))
             query = "SELECT QNo,Question,Answer,Chapter FROM QuestionAnswerTable";
        else
            query = "SELECT QNo,Question,Answer,Chapter FROM QuestionAnswerTable WHERE Chapter='"+chapter+"'";
        
       try {
           rs = stmt.executeQuery(query);
           countQuestions();
           System.out.println("statement executed !");
       } catch (SQLException ex) {
           System.out.println(ex);
       }
    }
    
    public void GetAllChapters()
    {
        String query2 = "SELECT DISTINCT Chapter FROM QuestionAnswerTable";
       try {
           rs = null;
           rs = stmt.executeQuery(query2);
           while(rs.next()){
               String item = rs.getString(1);
               System.out.println(""+item);
           chapterSelector.addItem(new String(item));
           
           }
           System.out.println("chapters updated");
           
          
       } catch (SQLException ex) {
           Logger.getLogger(LearnFrame.class.getName()).log(Level.SEVERE, null, ex);
       }
       chaptersInitialised = true;
    }
    
    public void prev()
    {
          try {
           if(rs.previous())
           {
              String question = rs.getString("Question") ;
              String answer = rs.getString("Answer");
              String chapter = rs.getString("Chapter");
             int questionNo = rs.getRow();
             
              answerText.setText(answer);
              questionText.setText(question);
              selectedChapterText.setText("Chapter : "+chapter);
              questionNoText.setText("Question : "+ questionNo+ "/ "+numberOfQuestions);
                   
           }
           else
               JOptionPane.showMessageDialog(this, "No more Records");
              
               
               } catch (SQLException ex) {
           Logger.getLogger(LearnFrame.class.getName()).log(Level.SEVERE, null, ex);
       }
       
           
    }
    
    public void next()
    {
           
       try {
           if(rs.next())
           {
              String question = rs.getString("Question") ;
              String answer = rs.getString("Answer");
              String chapter = rs.getString("Chapter");
              int questionNo = rs.getRow();
             
             
              answerText.setText(answer);
              questionText.setText(question);
              selectedChapterText.setText("Chapter : "+chapter);
              questionNoText.setText("Question : " + questionNo + "/ "+numberOfQuestions);
              
       
                                                 
           }
           else
           {
               JOptionPane.showMessageDialog(this, "No more Records");
               rs.previous();
           }
              
               
               } catch (SQLException ex) {
           Logger.getLogger(LearnFrame.class.getName()).log(Level.SEVERE, null, ex);
       }
       
       
    }
    
    public void countQuestions()
    {
       try {
           rs.last();
           numberOfQuestions  = rs.getRow();
           rs.beforeFirst();
           } catch (SQLException ex) {
           Logger.getLogger(LearnFrame.class.getName()).log(Level.SEVERE, null, ex);
       }
       
        
    }
    
    
        public void setStopMySqlProcess()
    {
       
        
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
        @Override
            public void windowClosing(WindowEvent event)
            {
               stopMySql();
               System.exit(0);
            }
         });
        
    }
    public void stopMySql()
    {
         String command = "C:\\xampp\\mysql_stop.bat";
        try{              
                 Process process = Runtime.getRuntime().exec(command);
                 process.waitFor(6, TimeUnit.SECONDS);
                 
                 }
                catch (IOException e)
                {    e.printStackTrace();
                     JOptionPane.showMessageDialog(this,"Database could not load ");
                } catch (InterruptedException ex) {
                    Logger.getLogger(Intro_1.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,"Database could not load ");
                }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LearnFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LearnFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LearnFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LearnFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LearnFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea answerText;
    private javax.swing.JComboBox<String> chapterSelector;
    private javax.swing.JCheckBox checkBox;
    private javax.swing.JLabel deleteButton;
    private javax.swing.JLabel homeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel nextButton;
    private javax.swing.JLabel previousButton;
    private javax.swing.JLabel questionNoText;
    private javax.swing.JTextArea questionText;
    private javax.swing.JLabel selectedChapterText;
    private javax.swing.JLabel updateButton;
    // End of variables declaration//GEN-END:variables
}
